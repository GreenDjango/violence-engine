name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac. You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Primes
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.conan
          key: ${{ runner.os }}-${{ hashFiles('**/conanfile.txt') }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Pip
        run: python -m pip install --upgrade pip

      - name: Install Conan
        run: pip install conan

      - name: Add Conana remote if no cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Update package lists
        run: sudo -A apt-get update -y --fix-missing

      - name: Install libX dependencies
        run: sudo -A apt-get install libgl1-mesa-dev xorg-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-xinerama0-dev libudev-dev -y

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Install Conan Dependencies
        working-directory: ${{runner.workspace}}/build
        run: conan install $GITHUB_WORKSPACE --build=missing

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE
        #- name: Test
        #working-directory: ${{runner.workspace}}/build
        #shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        #run: ctest -C $BUILD_TYPE
